@model IEnumerable<SistemadePasteleria.Models.Producto>

@{
    ViewData["Title"] = "Productos";
}

<div class="card shadow-sm p-4" style="background-color: rgba(255, 255, 255, 0.9); border-radius: 12px;">
    <h2 class="mb-4 text-center" style="color: #6c757d;">
        <i class="bi bi-cake2-fill me-2"></i> Lista de Productos
    </h2>

    <!-- Barra de búsqueda -->
    <form asp-action="Index" method="get" class="mb-4" role="search">
        <div class="input-group">
            <input id="inputBuscar"
                   type="text"
                   name="buscar"
                   class="form-control"
                   placeholder="Buscar por nombre o categoría"
                   value="@(ViewData["buscar"] as string)"
                   style="border-radius: 8px 0 0 8px;">
            <button type="submit"
                    class="btn"
                    style="background-color: #6c757d; color: white; border-radius: 0 8px 8px 0;">
                🔍 Buscar
            </button>
        </div>
    </form>

    <!-- Botón Crear -->
    <a asp-action="Create"
       class="btn mb-3"
       style="background-color: #adb5bd; color: white; border-radius: 8px;">
        ➕ Nuevo Producto
    </a>

    <!-- Tabla -->
    <table class="table table-hover table-bordered" style="background-color: white; border-radius: 8px; overflow: hidden;">
        <thead style="background-color: #e9ecef; color: #6c757d;">
            <tr>
                <th>Nombre</th>
                <th>Precio</th>
                <th>Stock</th>
                <th>Imagen</th>
                <th>Categoría</th>
                <th class="text-center">Acciones</th>
            </tr>
        </thead>
        <tbody id="tbodyProductos">
            @Html.Partial("_ProductosRows", Model)
        </tbody>
    </table>

    <!-- Paginación -->
    <partial name="_Paginacion" model="ViewBag.Paginacion" />
</div>

@section Scripts {
    <script>
        (function () {
            const input = document.getElementById('inputBuscar');
            const tbody = document.getElementById('tbodyProductos');
            let timer = null;
            let lastTerm = input ? (input.value || '').trim() : '';

            function debounce(fn, delay) {
                return function (...args) {
                    clearTimeout(timer);
                    timer = setTimeout(() => fn.apply(this, args), delay);
                };
            }

            async function buscar(term) {
                try {
                    tbody.innerHTML = `
                                <tr>
                                    <td colspan="6" class="text-center">
                                        <div class="spinner-border" role="status" aria-label="Cargando resultados"></div>
                                    </td>
                                </tr>`;

                    const url = '@Url.Action("Buscar", "Productos")' + '?term=' + encodeURIComponent(term || '');
                    const resp = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                    if (!resp.ok) throw new Error('Error al cargar resultados');
                    const html = await resp.text();
                    tbody.innerHTML = html;
                } catch (e) {
                    console.error(e);
                    tbody.innerHTML = `
                                <tr>
                                    <td colspan="6" class="text-center text-danger">Ocurrió un error al buscar.</td>
                                </tr>`;
                }
            }

            const onInput = debounce((ev) => {
                const term = (ev.target.value || '').trim();
                if (term === lastTerm) return;
                lastTerm = term;
                buscar(term);
            }, 300);

            if (input) {
                input.addEventListener('input', onInput);
            }
        })();
    </script>
}
